// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Exercice.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Exercice TABLE
class TableExercice extends SqfEntityTableBase {
  TableExercice() {
    // declare properties of EntityTable
    tableName = 'exercices';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('rest', DbType.integer, defaultValue: 60),
      SqfEntityFieldBase('series', DbType.integer, defaultValue: 4),
      SqfEntityFieldBase('reps', DbType.integer, defaultValue: 8),
      SqfEntityFieldBase('day', DbType.integer, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableExercice();
  }
}

// Performed TABLE
class TablePerformed extends SqfEntityTableBase {
  TablePerformed() {
    // declare properties of EntityTable
    tableName = 'performed';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(
          TableExercice.getInstance, DeleteRule.NO_ACTION,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'exercice',
          isNotNull: true),
      SqfEntityFieldBase('seriesIndex', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('weight', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('date', DbType.datetimeUtc,
          isNotNull: true, minValue: DateTime.parse('1900-01-01')),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePerformed();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9007199254740991; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence? _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableExercice.getInstance,
      TablePerformed.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};
    controllers['exercices'] = ExerciceController.getController;

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Exercice
class Exercice extends TableBase {
  Exercice({this.id, this.name, this.rest, this.series, this.reps, this.day}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Exercice.withFields(this.name, this.rest, this.series, this.reps, this.day) {
    _setDefaultValues();
  }
  Exercice.withId(
      this.id, this.name, this.rest, this.series, this.reps, this.day) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Exercice.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['rest'] != null) {
      rest = int.tryParse(o['rest'].toString());
    }
    if (o['series'] != null) {
      series = int.tryParse(o['series'].toString());
    }
    if (o['reps'] != null) {
      reps = int.tryParse(o['reps'].toString());
    }
    if (o['day'] != null) {
      day = int.tryParse(o['day'].toString());
    }
  }
  // FIELDS (Exercice)
  int? id;
  String? name;
  int? rest;
  int? series;
  int? reps;
  int? day;

  // end FIELDS (Exercice)

// COLLECTIONS & VIRTUALS (Exercice)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plPerformeds', 'plField2'..]) or so on..
  List<Performed>? plPerformeds;

  /// get Performed(s) filtered by id=exercice
  PerformedFilterBuilder? getPerformeds(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Performed()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .exercice
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Exercice)

  static const bool _softDeleteActivated = false;
  ExerciceManager? __mnExercice;

  ExerciceManager get _mnExercice {
    return __mnExercice = __mnExercice ?? ExerciceManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (rest != null || !forView) {
      map['rest'] = rest;
    }
    if (series != null || !forView) {
      map['series'] = series;
    }
    if (reps != null || !forView) {
      map['reps'] = reps;
    }
    if (day != null || !forView) {
      map['day'] = day;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (rest != null || !forView) {
      map['rest'] = rest;
    }
    if (series != null || !forView) {
      map['series'] = series;
    }
    if (reps != null || !forView) {
      map['reps'] = reps;
    }
    if (day != null || !forView) {
      map['day'] = day;
    }

// COLLECTIONS (Exercice)
    if (!forQuery) {
      map['Performeds'] = await getPerformeds()!.toMapList();
    }
// END COLLECTIONS (Exercice)

    return map;
  }

  /// This method returns Json String [Exercice]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Exercice]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [name, rest, series, reps, day];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, name, rest, series, reps, day];
  }

  static Future<List<Exercice>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Exercice.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Exercice>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Exercice>[];
    try {
      objList = list
          .map((exercice) => Exercice.fromMap(exercice as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Exercice.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Exercice>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Exercice> objList = <Exercice>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Exercice.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercices.plPerformeds') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformeds'))) {
          /*_loadedfields!.add('exercices.plPerformeds'); */ obj.plPerformeds =
              obj.plPerformeds ??
                  await obj.getPerformeds()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Exercice by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Exercice] if exist, otherwise returns null
  Future<Exercice?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Exercice? obj;
    final data = await _mnExercice.getById([id]);
    if (data.length != 0) {
      obj = Exercice.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercices.plPerformeds') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformeds'))) {
          /*_loadedfields!.add('exercices.plPerformeds'); */ obj.plPerformeds =
              obj.plPerformeds ??
                  await obj.getPerformeds()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Exercice) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExercice.insert(this, ignoreBatch);
    } else {
      await _mnExercice.update(this);
    }

    return id;
  }

  /// Saves the (Exercice) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnExercice.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnExercice.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Exercice. Returns a new Primary Key value of Exercice

  /// <returns>Returns a new Primary Key value of Exercice
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Exercice> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Exercice> exercices,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in exercices) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < exercices.length; i++) {
        if (exercices[i].id == null) {
          exercices[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnExercice.rawInsert(
          'INSERT OR REPLACE INTO exercices (id, name, rest, series, reps, day)  VALUES (?,?,?,?,?,?)',
          [id, name, rest, series, reps, day],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Exercice id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Exercice id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Exercice Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Exercice>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Exercice> exercices,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnExercice.rawInsertAll(
        'INSERT OR REPLACE INTO exercices (id, name, rest, series, reps, day)  VALUES (?,?,?,?,?,?)',
        exercices,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Exercice

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Exercice invoked (id=$id)');
    if (await Performed().select().exercice.equals(id).and.toCount() > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Performed.exercice)');
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnExercice
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnExercice.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Exercice] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  ExerciceFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExerciceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  ExerciceFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return ExerciceFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    rest = rest ?? 60;
    series = series ?? 4;
    reps = reps ?? 8;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion exercice

// region ExerciceField
class ExerciceField extends FilterBase {
  ExerciceField(ExerciceFilterBuilder exerciceFB) : super(exerciceFB);

  @override
  ExerciceFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder isNull() {
    return super.isNull() as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as ExerciceFilterBuilder;
  }

  @override
  ExerciceField get not {
    return super.not as ExerciceField;
  }
}
// endregion ExerciceField

// region ExerciceFilterBuilder
class ExerciceFilterBuilder extends ConjunctionBase {
  ExerciceFilterBuilder(Exercice obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnExercice = obj._mnExercice;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  ExerciceManager? _mnExercice;

  /// put the sql keyword 'AND'
  @override
  ExerciceFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  ExerciceFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  ExerciceFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  ExerciceFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  ExerciceFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  ExerciceFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  ExerciceFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExerciceFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExerciceFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  ExerciceFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  ExerciceFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  ExerciceField _setField(ExerciceField? field, String colName, DbType dbtype) {
    return ExerciceField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  ExerciceField? _id;
  ExerciceField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  ExerciceField? _name;
  ExerciceField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  ExerciceField? _rest;
  ExerciceField get rest {
    return _rest = _setField(_rest, 'rest', DbType.integer);
  }

  ExerciceField? _series;
  ExerciceField get series {
    return _series = _setField(_series, 'series', DbType.integer);
  }

  ExerciceField? _reps;
  ExerciceField get reps {
    return _reps = _setField(_reps, 'reps', DbType.integer);
  }

  ExerciceField? _day;
  ExerciceField get day {
    return _day = _setField(_day, 'day', DbType.integer);
  }

  /// Deletes List<Exercice> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Check sub records where in (Performed) according to DeleteRule.NO_ACTION

    final idListPerformedBYexercice = toListPrimaryKeySQL(false);
    final resPerformedBYexercice = await Performed()
        .select()
        .where('exercice IN (${idListPerformedBYexercice['sql']})',
            parameterValue: idListPerformedBYexercice['args'])
        .toCount();
    if (resPerformedBYexercice > 0) {
      return BoolResult(
          success: false,
          errorMessage:
              'SQFENTITY ERROR: The DELETE statement conflicted with the REFERENCE RELATIONSHIP (Performed.exercice)');
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnExercice!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnExercice!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from exercices ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnExercice!.updateBatch(qparams, values);
  }

  /// This method always returns [Exercice] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Exercice?
  @override
  Future<Exercice?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnExercice!.toList(qparams);
    final data = await objFuture;
    Exercice? obj;
    if (data.isNotEmpty) {
      obj = Exercice.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('exercices.plPerformeds') && */ (preloadFields ==
                null ||
            preloadFields.contains('plPerformeds'))) {
          /*_loadedfields!.add('exercices.plPerformeds'); */ obj.plPerformeds =
              obj.plPerformeds ??
                  await obj.getPerformeds()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Exercice]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Exercice?
  @override
  Future<Exercice> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Exercice();
  }

  /// This method returns int. [Exercice]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? exerciceCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final exercicesFuture = await _mnExercice!.toList(qparams);
    final int count = exercicesFuture[0]['CNT'] as int;
    if (exerciceCount != null) {
      exerciceCount(count);
    }
    return count;
  }

  /// This method returns List<Exercice> [Exercice]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Exercice>
  @override
  Future<List<Exercice>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Exercice> exercicesData = await Exercice.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return exercicesData;
  }

  /// This method returns Json String [Exercice]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Exercice]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Exercice]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnExercice!.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Exercice>>
  Future<List<DropdownMenuItem<Exercice>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Exercice>> o)?
          dropDownMenu]) async {
    buildParameters();
    final exercicesFuture = _mnExercice!.toList(qparams);

    final data = await exercicesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Exercice>> items = []..add(DropdownMenuItem(
        value: Exercice(),
        child: Text('Select Exercice'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Exercice.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)?
          dropDownMenu]) async {
    buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final exercicesFuture = _mnExercice!.toList(qparams);

    final data = await exercicesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Exercice'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Exercice]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM exercices WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnExercice!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Exercice]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnExercice!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Exercice.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnExercice!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion ExerciceFilterBuilder

// region ExerciceFields
class ExerciceFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fRest;
  static TableField get rest {
    return _fRest =
        _fRest ?? SqlSyntax.setField(_fRest, 'rest', DbType.integer);
  }

  static TableField? _fSeries;
  static TableField get series {
    return _fSeries =
        _fSeries ?? SqlSyntax.setField(_fSeries, 'series', DbType.integer);
  }

  static TableField? _fReps;
  static TableField get reps {
    return _fReps =
        _fReps ?? SqlSyntax.setField(_fReps, 'reps', DbType.integer);
  }

  static TableField? _fDay;
  static TableField get day {
    return _fDay = _fDay ?? SqlSyntax.setField(_fDay, 'day', DbType.integer);
  }
}
// endregion ExerciceFields

//region ExerciceManager
class ExerciceManager extends SqfEntityProvider {
  ExerciceManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'exercices';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion ExerciceManager
// region Performed
class Performed extends TableBase {
  Performed(
      {this.id, this.exercice, this.seriesIndex, this.weight, this.date}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Performed.withFields(
      this.exercice, this.seriesIndex, this.weight, this.date) {
    _setDefaultValues();
  }
  Performed.withId(
      this.id, this.exercice, this.seriesIndex, this.weight, this.date) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Performed.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    exercice = int.tryParse(o['exercice'].toString());

    if (o['seriesIndex'] != null) {
      seriesIndex = int.tryParse(o['seriesIndex'].toString());
    }
    if (o['weight'] != null) {
      weight = int.tryParse(o['weight'].toString());
    }
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!,
              isUtc: true)
          : DateTime.tryParse(o['date'].toString());
    }

    // RELATIONSHIPS FromMAP
    plExercice = o['plExercice'] != null
        ? Exercice.fromMap(o['plExercice'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Performed)
  int? id;
  int? exercice;
  int? seriesIndex;
  int? weight;
  DateTime? date;

  // end FIELDS (Performed)

// RELATIONSHIPS (Performed)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plExercice', 'plField2'..]) or so on..
  Exercice? plExercice;

  /// get Exercice By Exercice
  Future<Exercice?> getExercice(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Exercice().getById(exercice,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Performed)

  static const bool _softDeleteActivated = false;
  PerformedManager? __mnPerformed;

  PerformedManager get _mnPerformed {
    return __mnPerformed = __mnPerformed ?? PerformedManager();
  }

  @override
  String toString() {
    return "id =$id,exercice =$exercice,seriesIndex =$seriesIndex,weight =$weight,date =$date";
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (exercice != null) {
      map['exercice'] = forView
          ? plExercice == null
              ? exercice
              : plExercice!.name
          : exercice;
    } else if (exercice != null || !forView) {
      map['exercice'] = null;
    }
    if (seriesIndex != null || !forView) {
      map['seriesIndex'] = seriesIndex;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toUtc().toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (exercice != null) {
      map['exercice'] = forView
          ? plExercice == null
              ? exercice
              : plExercice!.name
          : exercice;
    } else if (exercice != null || !forView) {
      map['exercice'] = null;
    }
    if (seriesIndex != null || !forView) {
      map['seriesIndex'] = seriesIndex;
    }
    if (weight != null || !forView) {
      map['weight'] = weight;
    }
    if (date != null) {
      map['date'] = forJson
          ? date!.toUtc().toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }

    return map;
  }

  /// This method returns Json String [Performed]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Performed]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      exercice,
      seriesIndex,
      weight,
      date != null ? date!.millisecondsSinceEpoch : null
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      exercice,
      seriesIndex,
      weight,
      date != null ? date!.millisecondsSinceEpoch : null
    ];
  }

  static Future<List<Performed>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Performed.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Performed>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Performed>[];
    try {
      objList = list
          .map((performed) =>
              Performed.fromMap(performed as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Performed.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Performed>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Performed> objList = <Performed>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Performed.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercice'))) {
          obj.plExercice =
              obj.plExercice ?? await obj.getExercice(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Performed by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Performed] if exist, otherwise returns null
  Future<Performed?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Performed? obj;
    final data = await _mnPerformed.getById([id]);
    if (data.length != 0) {
      obj = Performed.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercice'))) {
          obj.plExercice =
              obj.plExercice ?? await obj.getExercice(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Performed) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPerformed.insert(this, ignoreBatch);
    } else {
      await _mnPerformed.update(this);
    }

    return id;
  }

  /// Saves the (Performed) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnPerformed.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnPerformed.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Performed. Returns a new Primary Key value of Performed

  /// <returns>Returns a new Primary Key value of Performed
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Performed> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Performed> performeds,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in performeds) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < performeds.length; i++) {
        if (performeds[i].id == null) {
          performeds[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnPerformed.rawInsert(
          'INSERT OR REPLACE INTO performed (id, exercice, seriesIndex, weight, date)  VALUES (?,?,?,?,?)',
          [
            id,
            exercice,
            seriesIndex,
            weight,
            date != null ? date!.millisecondsSinceEpoch : null
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Performed id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Performed id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Performed Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Performed>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Performed> performeds,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnPerformed.rawInsertAll(
        'INSERT OR REPLACE INTO performed (id, exercice, seriesIndex, weight, date)  VALUES (?,?,?,?,?)',
        performeds,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Performed

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Performed invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnPerformed
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPerformed.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Performed] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  PerformedFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PerformedFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  PerformedFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return PerformedFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion performed

// region PerformedField
class PerformedField extends FilterBase {
  PerformedField(PerformedFilterBuilder performedFB) : super(performedFB);

  @override
  PerformedFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder isNull() {
    return super.isNull() as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as PerformedFilterBuilder;
  }

  @override
  PerformedField get not {
    return super.not as PerformedField;
  }
}
// endregion PerformedField

// region PerformedFilterBuilder
class PerformedFilterBuilder extends ConjunctionBase {
  PerformedFilterBuilder(Performed obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnPerformed = obj._mnPerformed;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  PerformedManager? _mnPerformed;

  /// put the sql keyword 'AND'
  @override
  PerformedFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  PerformedFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  PerformedFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  PerformedFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  PerformedFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  PerformedFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  PerformedFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PerformedFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PerformedFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  PerformedFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  PerformedFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  PerformedField _setField(
      PerformedField? field, String colName, DbType dbtype) {
    return PerformedField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  PerformedField? _id;
  PerformedField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  PerformedField? _exercice;
  PerformedField get exercice {
    return _exercice = _setField(_exercice, 'exercice', DbType.integer);
  }

  PerformedField? _seriesIndex;
  PerformedField get seriesIndex {
    return _seriesIndex =
        _setField(_seriesIndex, 'seriesIndex', DbType.integer);
  }

  PerformedField? _weight;
  PerformedField get weight {
    return _weight = _setField(_weight, 'weight', DbType.integer);
  }

  PerformedField? _date;
  PerformedField get date {
    return _date = _setField(_date, 'date', DbType.datetimeUtc);
  }

  /// Deletes List<Performed> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnPerformed!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnPerformed!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from performed ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnPerformed!.updateBatch(qparams, values);
  }

  /// This method always returns [Performed] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Performed?
  @override
  Future<Performed?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnPerformed!.toList(qparams);
    final data = await objFuture;
    Performed? obj;
    if (data.isNotEmpty) {
      obj = Performed.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plExercice'))) {
          obj.plExercice =
              obj.plExercice ?? await obj.getExercice(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Performed]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Performed?
  @override
  Future<Performed> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Performed();
  }

  /// This method returns int. [Performed]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? performedCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final performedsFuture = await _mnPerformed!.toList(qparams);
    final int count = performedsFuture[0]['CNT'] as int;
    if (performedCount != null) {
      performedCount(count);
    }
    return count;
  }

  /// This method returns List<Performed> [Performed]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Performed>
  @override
  Future<List<Performed>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Performed> performedsData = await Performed.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return performedsData;
  }

  /// This method returns Json String [Performed]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Performed]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Performed]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnPerformed!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Performed]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM performed WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnPerformed!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Performed]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnPerformed!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Performed.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnPerformed!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PerformedFilterBuilder

// region PerformedFields
class PerformedFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fExercice;
  static TableField get exercice {
    return _fExercice = _fExercice ??
        SqlSyntax.setField(_fExercice, 'exercice', DbType.integer);
  }

  static TableField? _fSeriesIndex;
  static TableField get seriesIndex {
    return _fSeriesIndex = _fSeriesIndex ??
        SqlSyntax.setField(_fSeriesIndex, 'seriesIndex', DbType.integer);
  }

  static TableField? _fWeight;
  static TableField get weight {
    return _fWeight =
        _fWeight ?? SqlSyntax.setField(_fWeight, 'weight', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetimeUtc);
  }
}
// endregion PerformedFields

//region PerformedManager
class PerformedManager extends SqfEntityProvider {
  PerformedManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'performed';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion PerformedManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback Function(int o)? nextval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback Function(int o)? currentval]) async {
    final val = await MyDbModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES

// BEGIN CONTROLLERS
// BEGIN CONTROLLER (Exercice)

class ExerciceController extends Exercice {
  String formListTitleField = 'name';
  String formListSubTitleField = 'rest';
  static SQFViewList getController = SQFViewList(
    ExerciceController(),
    primaryKeyName: 'id',
    useSoftDeleting: false,
  );
  Map<String, String> subMenu() {
    final menu = <String, String>{};

    return menu;
  }

  Future<Widget> gotoEdit(dynamic obj) async {
    return ExerciceAdd(obj == null
        ? Exercice()
        : await Exercice().getById(obj['id'] as int) ?? Exercice());
  }
}
// END CONTROLLER (Exercice)

// END OF CONTROLLERS
